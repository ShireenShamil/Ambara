"use client"

import { Card } from "@/components/ui/card"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from "@/components/ui/alert-dialog"
import { CheckCircle, Trash2 } from "lucide-react"
import { useNotifications } from "@/contexts/notification-context"
import Link from "next/link"
import { useState } from "react"

type NotificationType = 'order' | 'design' | 'shipping' | 'promotion' | 'other'

const notificationTypes: { value: NotificationType; label: string }[] = [
  { value: 'order', label: 'Orders' },
  { value: 'design', label: 'Designs' },
  { value: 'shipping', label: 'Shipping' },
  { value: 'promotion', label: 'Promotions' },
  { value: 'other', label: 'Other' },
]

export default function NotificationsPage() {
  const { state, dispatch } = useNotifications()
  const [selectedTypes, setSelectedTypes] = useState<NotificationType[]>([])

  const filteredNotifications = selectedTypes.length > 0
    ? state.notifications.filter(n => selectedTypes.includes(n.type))
    : state.notifications

  const getNotificationBadge = (type: NotificationType) => {
    const badges = {
      order: { label: 'Order Update', variant: 'default' },
      design: { label: 'Design Update', variant: 'secondary' },
      shipping: { label: 'Shipping Update', variant: 'outline' },
      promotion: { label: 'Special Offer', variant: 'destructive' },
      other: { label: 'Notification', variant: 'outline' }
    }
    return badges[type]
  }

  const handleMarkAsRead = (id: string, e: React.MouseEvent) => {
    e.preventDefault()
    dispatch({ type: 'MARK_AS_READ', id })
  }

  const handleMarkAllAsRead = () => {
    dispatch({ type: 'MARK_ALL_AS_READ' })
  }

  const handleClearAll = () => {
    dispatch({ type: 'CLEAR_ALL' })
  }

  const handleTypeToggle = (type: NotificationType) => {
    setSelectedTypes(prev => 
      prev.includes(type)
        ? prev.filter(t => t !== type)
        : [...prev, type]
    )
  }

  const handlePreferenceToggle = (type: NotificationType) => {
    dispatch({
      type: 'UPDATE_PREFERENCES',
      preferences: {
        ...state.preferences,
        [type]: !state.preferences[type]
      }
    })
  }

  return (
    <div className="container mx-auto p-8">
      <div className="flex items-center justify-between mb-8">
        <h1 className="text-3xl font-bold">My Notifications</h1>
        <div className="flex items-center gap-3">
          {/* Mark All as Read Button */}
          <Button 
            variant="outline" 
            size="sm"
            onClick={handleMarkAllAsRead}
          >
            <CheckCircle className="mr-2 h-4 w-4" />
            Mark all as read
          </Button>

          {/* Clear All Dialog */}
          <AlertDialog>
            <AlertDialogTrigger asChild>
              <Button variant="outline" size="sm">
                <Trash2 className="mr-2 h-4 w-4" />
                Clear all
              </Button>
            </AlertDialogTrigger>
            <AlertDialogContent>
              <AlertDialogHeader>
                <AlertDialogTitle>Clear all notifications?</AlertDialogTitle>
                <AlertDialogDescription>
                  This action cannot be undone. All notifications will be permanently removed.
                </AlertDialogDescription>
              </AlertDialogHeader>
              <AlertDialogFooter>
                <AlertDialogCancel>Cancel</AlertDialogCancel>
                <AlertDialogAction onClick={handleClearAll}>Clear all</AlertDialogAction>
              </AlertDialogFooter>
            </AlertDialogContent>
          </AlertDialog>
              <SheetHeader>
                <SheetTitle className="text-xl font-semibold">Notification Preferences</SheetTitle>
                <SheetDescription className="text-sm text-muted-foreground mt-2">
                  Customize your notification experience by selecting which types of updates you want to receive.
                </SheetDescription>
              </SheetHeader>
              <div className="mt-8 space-y-6">
                {notificationTypes.map((type) => {
                  const descriptions = {
                    order: "Updates about your order status, confirmations, and processing.",
                    design: "Design preview notifications and approval requests.",
                    shipping: "Tracking updates and delivery notifications.",
                    promotion: "Special offers, discounts, and promotional announcements.",
                    other: "Other important updates about your account and services."
                  }
                  return (
                    <div key={type.value}>
                      <div className="flex items-center justify-between py-2">
                        <div className="space-y-1">
                          <div className="text-base font-medium">{type.label}</div>
                          <div className="text-sm text-muted-foreground leading-relaxed">
                            {descriptions[type.value]}
                          </div>
                        </div>
                        <Switch
                          checked={state.preferences[type.value]}
                          onCheckedChange={() => handlePreferenceToggle(type.value)}
                        />
                      </div>
                      {type.value !== 'other' && <Separator className="mt-4" />}
                    </div>
                  )
                })}
              </div>
            </SheetContent>
          </Sheet>
        </div>
      </div>

      {/* Filter Buttons */}
      <div className="flex gap-3 mb-8">
        {notificationTypes.map((type) => (
          <Button
            key={type.value}
            variant={selectedTypes.includes(type.value) ? "secondary" : "outline"}
            onClick={() => handleTypeToggle(type.value)}
            size="sm"
            className="px-6"
          >
            {type.label}
          </Button>
        ))}
      </div>

      <ScrollArea className="h-[calc(100vh-16rem)]">
        <div className="space-y-4">
          {filteredNotifications.map((notification) => (
            <Link 
              key={notification.id} 
              href={notification.actionUrl || '#'}
              className="block"
            >
              <Card
                className={`p-6 cursor-pointer hover:bg-accent transition-colors ${
                  !notification.read ? "border-l-4 border-l-primary" : ""
                }`}
              >
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <div className="flex items-center gap-3 mb-3">
                      <h3 className="font-semibold">{notification.title}</h3>
                      <Badge variant={getNotificationBadge(notification.type).variant as any}>
                        {getNotificationBadge(notification.type).label}
                      </Badge>
                      {!notification.read && (
                        <div className="flex items-center gap-2">
                          <span className="w-2 h-2 rounded-full bg-primary"/>
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={(e) => handleMarkAsRead(notification.id, e)}
                            className="h-6 px-2 text-xs"
                          >
                            Mark as read
                          </Button>
                        </div>
                      )}
                    </div>
                    <p className="text-sm text-muted-foreground leading-relaxed">
                      {notification.description}
                    </p>
                    <p className="text-xs text-muted-foreground mt-4">
                      {new Date(notification.date).toLocaleDateString()}
                    </p>
                  </div>
                </div>
              </Card>
            </Link>
          ))}
        </div>
      </ScrollArea>
    </div>
  )
}